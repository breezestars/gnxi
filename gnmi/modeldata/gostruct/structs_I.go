/*
Package gostruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /Users/cmo/.gvm/pkgsets/go1.10.2/global/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- github.com/openconfig/public/release/models/interfaces/openconfig-if-aggregate.yang
	- github.com/openconfig/public/release/models/interfaces/openconfig-if-ethernet.yang
	- github.com/openconfig/public/release/models/interfaces/openconfig-interfaces.yang
	- github.com/openconfig/public/release/models/lldp/openconfig-lldp.yang
	- github.com/openconfig/public/release/models/network-instance/openconfig-network-instance.yang
	- github.com/openconfig/public/release/models/platform/openconfig-platform.yang
	- github.com/openconfig/public/release/models/system/openconfig-system.yang
	- github.com/openconfig/public/release/models/vlan/openconfig-vlan.yang
Imported modules were sourced from:
	- github.com/openconfig/public/...
	- github.com/YangModels/yang/...
*/
package gostruct


// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus	E_OpenconfigInterfaces_Interface_AdminStatus	`path:"state/admin-status" module:"openconfig-interfaces"`
	Aggregation	*Interface_Aggregation	`path:"aggregation" module:"openconfig-if-aggregate"`
	Counters	*Interface_Counters	`path:"state/counters" module:"openconfig-interfaces"`
	Description	*string	`path:"config/description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-interfaces"`
	Ethernet	*Interface_Ethernet	`path:"ethernet" module:"openconfig-if-ethernet"`
	HoldTime	*Interface_HoldTime	`path:"hold-time" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"state/ifindex" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"state/last-change" module:"openconfig-interfaces"`
	LoopbackMode	*bool	`path:"config/loopback-mode" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"config/mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"config/name|name" module:"openconfig-interfaces"`
	OperStatus	E_OpenconfigInterfaces_Interface_OperStatus	`path:"state/oper-status" module:"openconfig-interfaces"`
	RoutedVlan	*Interface_RoutedVlan	`path:"routed-vlan" module:"openconfig-vlan"`
	Subinterface	map[uint32]*Interface_Subinterface	`path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	Tpid	E_OpenconfigVlanTypes_TPID_TYPES	`path:"config/tpid" module:"openconfig-vlan"`
	Type	E_IETFInterfaces_InterfaceType	`path:"config/type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}


// Interface_Aggregation represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_Aggregation struct {
	LagSpeed	*uint32	`path:"state/lag-speed" module:"openconfig-if-aggregate"`
	LagType	E_OpenconfigIfAggregate_AggregationType	`path:"config/lag-type" module:"openconfig-if-aggregate"`
	Member	[]string	`path:"state/member" module:"openconfig-if-aggregate"`
	MinLinks	*uint16	`path:"config/min-links" module:"openconfig-if-aggregate"`
	SwitchedVlan	*Interface_Aggregation_SwitchedVlan	`path:"switched-vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation) IsYANGGoStruct() {}


// Interface_Aggregation_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan struct {
	AccessVlan	*uint16	`path:"config/access-vlan" module:"openconfig-vlan"`
	InterfaceMode	E_OpenconfigVlan_VlanModeType	`path:"config/interface-mode" module:"openconfig-vlan"`
	NativeVlan	*uint16	`path:"config/native-vlan" module:"openconfig-vlan"`
	TrunkVlans	[]Interface_Aggregation_SwitchedVlan_TrunkVlans_Union	`path:"config/trunk-vlans" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Aggregation_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation_SwitchedVlan) IsYANGGoStruct() {}


// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}


// Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_Ethernet struct {
	AggregateId	*string	`path:"config/aggregate-id" module:"openconfig-if-aggregate"`
	AutoNegotiate	*bool	`path:"config/auto-negotiate" module:"openconfig-if-ethernet"`
	Counters	*Interface_Ethernet_Counters	`path:"state/counters" module:"openconfig-if-ethernet"`
	DuplexMode	E_OpenconfigIfEthernet_Ethernet_DuplexMode	`path:"config/duplex-mode" module:"openconfig-if-ethernet"`
	EnableFlowControl	*bool	`path:"config/enable-flow-control" module:"openconfig-if-ethernet"`
	HwMacAddress	*string	`path:"state/hw-mac-address" module:"openconfig-if-ethernet"`
	MacAddress	*string	`path:"config/mac-address" module:"openconfig-if-ethernet"`
	NegotiatedDuplexMode	E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode	`path:"state/negotiated-duplex-mode" module:"openconfig-if-ethernet"`
	NegotiatedPortSpeed	E_OpenconfigIfEthernet_ETHERNET_SPEED	`path:"state/negotiated-port-speed" module:"openconfig-if-ethernet"`
	PortSpeed	E_OpenconfigIfEthernet_ETHERNET_SPEED	`path:"config/port-speed" module:"openconfig-if-ethernet"`
	SwitchedVlan	*Interface_Ethernet_SwitchedVlan	`path:"switched-vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet) IsYANGGoStruct() {}


// Interface_Ethernet_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_Counters struct {
	In_8021QFrames	*uint64	`path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	InCrcErrors	*uint64	`path:"in-crc-errors" module:"openconfig-if-ethernet"`
	InFragmentFrames	*uint64	`path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	InJabberFrames	*uint64	`path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	InMacControlFrames	*uint64	`path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	InMacPauseFrames	*uint64	`path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	InOversizeFrames	*uint64	`path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	Out_8021QFrames	*uint64	`path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	OutMacControlFrames	*uint64	`path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	OutMacPauseFrames	*uint64	`path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_Counters) IsYANGGoStruct() {}


// Interface_Ethernet_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan struct {
	AccessVlan	*uint16	`path:"config/access-vlan" module:"openconfig-vlan"`
	InterfaceMode	E_OpenconfigVlan_VlanModeType	`path:"config/interface-mode" module:"openconfig-vlan"`
	NativeVlan	*uint16	`path:"config/native-vlan" module:"openconfig-vlan"`
	TrunkVlans	[]Interface_Ethernet_SwitchedVlan_TrunkVlans_Union	`path:"config/trunk-vlans" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_SwitchedVlan) IsYANGGoStruct() {}


// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down	*uint32	`path:"config/down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"config/up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}


// Interface_RoutedVlan represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlan struct {
	Vlan	Interface_RoutedVlan_Vlan_Union	`path:"config/vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan) IsYANGGoStruct() {}


// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus	E_OpenconfigInterfaces_Interface_AdminStatus	`path:"state/admin-status" module:"openconfig-interfaces"`
	Counters	*Interface_Subinterface_Counters	`path:"state/counters" module:"openconfig-interfaces"`
	Description	*string	`path:"config/description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"state/ifindex" module:"openconfig-interfaces"`
	Index	*uint32	`path:"config/index|index" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"state/last-change" module:"openconfig-interfaces"`
	Name	*string	`path:"state/name" module:"openconfig-interfaces"`
	OperStatus	E_OpenconfigInterfaces_Interface_OperStatus	`path:"state/oper-status" module:"openconfig-interfaces"`
	Vlan	*Interface_Subinterface_Vlan	`path:"vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}


// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}


// Interface_Subinterface_Vlan represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_Vlan struct {
	VlanId	Interface_Subinterface_Vlan_VlanId_Union	`path:"config/vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan) IsYANGGoStruct() {}


