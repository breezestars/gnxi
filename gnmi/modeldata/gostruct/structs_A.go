/*
Package gostruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /Users/cmo/.gvm/pkgsets/go1.10.2/global/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- github.com/openconfig/public/release/models/interfaces/openconfig-if-aggregate.yang
	- github.com/openconfig/public/release/models/interfaces/openconfig-if-ethernet.yang
	- github.com/openconfig/public/release/models/interfaces/openconfig-interfaces.yang
	- github.com/openconfig/public/release/models/lldp/openconfig-lldp.yang
	- github.com/openconfig/public/release/models/network-instance/openconfig-network-instance.yang
	- github.com/openconfig/public/release/models/platform/openconfig-platform.yang
	- github.com/openconfig/public/release/models/system/openconfig-system.yang
	- github.com/openconfig/public/release/models/vlan/openconfig-vlan.yang
Imported modules were sourced from:
	- github.com/openconfig/public/...
	- github.com/YangModels/yang/...
*/
package gostruct


// Acl represents the /openconfig-acl/acl YANG schema element.
type Acl struct {
	AclSet	map[Acl_AclSet_Key]*Acl_AclSet	`path:"acl-sets/acl-set" module:"openconfig-acl"`
	CounterCapability	E_OpenconfigAcl_ACL_COUNTER_CAPABILITY	`path:"state/counter-capability" module:"openconfig-acl"`
	Interface	map[string]*Acl_Interface	`path:"interfaces/interface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl) IsYANGGoStruct() {}

// Acl_AclSet_Key represents the key for list AclSet of element /openconfig-acl/acl.
type Acl_AclSet_Key struct {
	Name	string	`path:"name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}


// Acl_AclSet represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSet struct {
	AclEntry	map[uint32]*Acl_AclSet_AclEntry	`path:"acl-entries/acl-entry" module:"openconfig-acl"`
	Description	*string	`path:"config/description" module:"openconfig-acl"`
	Name	*string	`path:"config/name|name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"config/type|type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntry struct {
	Actions	*Acl_AclSet_AclEntry_Actions	`path:"actions" module:"openconfig-acl"`
	Description	*string	`path:"config/description" module:"openconfig-acl"`
	InputInterface	*Acl_AclSet_AclEntry_InputInterface	`path:"input-interface" module:"openconfig-acl"`
	Ipv4	*Acl_AclSet_AclEntry_Ipv4	`path:"ipv4" module:"openconfig-acl"`
	Ipv6	*Acl_AclSet_AclEntry_Ipv6	`path:"ipv6" module:"openconfig-acl"`
	L2	*Acl_AclSet_AclEntry_L2	`path:"l2" module:"openconfig-acl"`
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"config/sequence-id|sequence-id" module:"openconfig-acl"`
	Transport	*Acl_AclSet_AclEntry_Transport	`path:"transport" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_Actions represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_Actions struct {
	ForwardingAction	E_OpenconfigAcl_FORWARDING_ACTION	`path:"config/forwarding-action" module:"openconfig-acl"`
	LogAction	E_OpenconfigAcl_LOG_ACTION	`path:"config/log-action" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Actions) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_InputInterface represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface struct {
	InterfaceRef	*Acl_AclSet_AclEntry_InputInterface_InterfaceRef	`path:"interface-ref" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_InputInterface_InterfaceRef represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface_InterfaceRef) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_Ipv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4 struct {
	DestinationAddress	*string	`path:"config/destination-address" module:"openconfig-acl"`
	Dscp	*uint8	`path:"config/dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"config/hop-limit" module:"openconfig-acl"`
	Protocol	Acl_AclSet_AclEntry_Ipv4_Protocol_Union	`path:"config/protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"config/source-address" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv4) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_Ipv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6 struct {
	DestinationAddress	*string	`path:"config/destination-address" module:"openconfig-acl"`
	DestinationFlowLabel	*uint32	`path:"config/destination-flow-label" module:"openconfig-acl"`
	Dscp	*uint8	`path:"config/dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"config/hop-limit" module:"openconfig-acl"`
	Protocol	Acl_AclSet_AclEntry_Ipv6_Protocol_Union	`path:"config/protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"config/source-address" module:"openconfig-acl"`
	SourceFlowLabel	*uint32	`path:"config/source-flow-label" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv6) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_L2 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2 struct {
	DestinationMac	*string	`path:"config/destination-mac" module:"openconfig-acl"`
	DestinationMacMask	*string	`path:"config/destination-mac-mask" module:"openconfig-acl"`
	Ethertype	Acl_AclSet_AclEntry_L2_Ethertype_Union	`path:"config/ethertype" module:"openconfig-acl"`
	SourceMac	*string	`path:"config/source-mac" module:"openconfig-acl"`
	SourceMacMask	*string	`path:"config/source-mac-mask" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_L2) IsYANGGoStruct() {}


// Acl_AclSet_AclEntry_Transport represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_Transport struct {
	DestinationPort	Acl_AclSet_AclEntry_Transport_DestinationPort_Union	`path:"config/destination-port" module:"openconfig-acl"`
	SourcePort	Acl_AclSet_AclEntry_Transport_SourcePort_Union	`path:"config/source-port" module:"openconfig-acl"`
	TcpFlags	[]E_OpenconfigPacketMatchTypes_TCP_FLAGS	`path:"config/tcp-flags" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Transport) IsYANGGoStruct() {}


// Acl_Interface represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_Interface struct {
	EgressAclSet	map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet	`path:"egress-acl-sets/egress-acl-set" module:"openconfig-acl"`
	Id	*string	`path:"config/id|id" module:"openconfig-acl"`
	IngressAclSet	map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet	`path:"ingress-acl-sets/ingress-acl-set" module:"openconfig-acl"`
	InterfaceRef	*Acl_Interface_InterfaceRef	`path:"interface-ref" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface) IsYANGGoStruct() {}

// Acl_Interface_EgressAclSet_Key represents the key for list EgressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_EgressAclSet_Key struct {
	SetName	string	`path:"set-name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// Acl_Interface_IngressAclSet_Key represents the key for list IngressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_IngressAclSet_Key struct {
	SetName	string	`path:"set-name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}


// Acl_Interface_EgressAclSet represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSet struct {
	AclEntry	map[uint32]*Acl_Interface_EgressAclSet_AclEntry	`path:"acl-entries/acl-entry" module:"openconfig-acl"`
	SetName	*string	`path:"config/set-name|set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"config/type|type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet) IsYANGGoStruct() {}


// Acl_Interface_EgressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry struct {
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"state/sequence-id|sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet_AclEntry) IsYANGGoStruct() {}


// Acl_Interface_IngressAclSet represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSet struct {
	AclEntry	map[uint32]*Acl_Interface_IngressAclSet_AclEntry	`path:"acl-entries/acl-entry" module:"openconfig-acl"`
	SetName	*string	`path:"config/set-name|set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"config/type|type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet) IsYANGGoStruct() {}


// Acl_Interface_IngressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry struct {
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"state/sequence-id|sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet_AclEntry) IsYANGGoStruct() {}


// Acl_Interface_InterfaceRef represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_InterfaceRef) IsYANGGoStruct() {}


